name: STGNN Continual Tasks Generator
description: Loads pickled STGNN dataset and splits it into continual learning tasks
inputs:
  - name: data_pickle
    type: Dataset
    description: "Pickle file containing DataWrapper object (STGNN formatted data)."
  - name: Splitting_strategy
    type: string
    description: "Strategy for splitting data: temporal_split, anomaly_split, drift_split"
  - name: num_tasks
    type: Integer
    description: "Number of continual learning tasks to create"
outputs:
  - name: tasks_pickle
    type: Dataset
    description: "Pickle file containing list of continual learning tasks"
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        python3 -m pip install --quiet numpy torch || \
        python3 -m pip install --quiet numpy torch --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse, os, pickle
        import numpy as np
        import torch

        # import your splitter from the script
        class TemporalDataSplitter:
            """
            Splits time-series data into temporal continual learning tasks.
            Each task represents a different time period or data distribution.
            """
            
            def __init__(self, data, config, strategy='temporal_split'):
                """
                Initialize the temporal data splitter.
                
                Args:
                    data: Original time-series data
                    config: Model configuration
                    strategy: Splitting strategy ('temporal_split', 'anomaly_split', 'drift_split')
                """
                self.data = data
                self.config = config
                self.strategy = strategy
                
            def create_continual_tasks(self, num_tasks: int = 3):
                if self.strategy == 'temporal_split':
                    return self._temporal_split(num_tasks)
                elif self.strategy == 'anomaly_split':
                    return self._anomaly_split(num_tasks)
                elif self.strategy == 'drift_split':
                    return self._drift_split(num_tasks)
                else:
                    raise ValueError(f"Unknown strategy: {self.strategy}")

            # (your _temporal_split, _anomaly_split, _drift_split go here unchanged,
            # indentation already fixed in the block you pasted)

        parser = argparse.ArgumentParser()
        parser.add_argument('--data_pickle', type=str, required=True, help='Input DataWrapper pickle path')
        parser.add_argument('--splitting_strategy', type=str, default='temporal_split', help='Split strategy')
        parser.add_argument('--num_tasks', type=int, default=3, help='Number of tasks to create')
        parser.add_argument('--tasks_pickle', type=str, required=True, help='Output pickle for tasks')
        args = parser.parse_args()

        # Load DataWrapper object
        with open(args.data_pickle, "rb") as f:
            data = pickle.load(f)

        # Split into continual tasks
        splitter = TemporalDataSplitter(data, config=getattr(data, "config", {}), strategy=args.splitting_strategy)
        tasks = splitter.create_continual_tasks(num_tasks=args.num_tasks)

        # Save tasks list as pickle
        os.makedirs(os.path.dirname(args.tasks_pickle) or ".", exist_ok=True)
        with open(args.tasks_pickle, "wb") as f:
            pickle.dump(tasks, f)

        print(f" Saved {len(tasks)} continual tasks â†’ {args.tasks_pickle}")
    args:
      - --data_pickle
      - {inputPath: data_pickle}
      - --splitting_strategy
      - {inputValue: splitting_strategy}
      - --num_tasks
      - {inputValue: num_tasks}
      - --tasks_pickle
      - {outputPath: tasks_pickle}
