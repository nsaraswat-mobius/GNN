name: Load PPI Dataset
description: Loads the PPI dataset (train/val/test splits) and saves them as a Dataset type.
outputs:
  - {name: PPI_data, type: Dataset}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch torchvision torchaudio torch_geometric pandas || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch torchvision torchaudio torch_geometric pandas --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import os
        import pickle
        import torch
        from torch_geometric.datasets import PPI

        parser = argparse.ArgumentParser()
        parser.add_argument('--PPI_data', type=str, required=True)
        args = parser.parse_args()

        print(f"[INFO] Loading PPI dataset (train/val/test)...")

        # Load splits separately
        train_dataset = PPI(root='/tmp/PPI', split='train')
        val_dataset   = PPI(root='/tmp/PPI', split='val')
        test_dataset  = PPI(root='/tmp/PPI', split='test')

        # Collect all splits into a dict
        data_dict = {
            "train": train_dataset,
            "val": val_dataset,
            "test": test_dataset
        }

        # Logging info
        print(f"[INFO] Dataset loaded successfully")
        print(f"[INFO] Train graphs: {len(train_dataset)}")
        print(f"[INFO] Val graphs:   {len(val_dataset)}")
        print(f"[INFO] Test graphs:  {len(test_dataset)}")
        print(f"[INFO] Node feature dimension: {train_dataset.num_features}")
        print(f"[INFO] Number of labels (multi-label): {train_dataset.num_classes}")

        # Ensure output directory
        os.makedirs(os.path.dirname(args.PPI_data), exist_ok=True)

        # Save dataset dict
        with open(args.PPI_data, "wb") as f:
            pickle.dump(data_dict, f)

        print(f"[SUCCESS] Saved PPI dataset (train/val/test) to {args.PPI_data}")
    args:
      - --PPI_data
      - {outputPath: PPI_data}
