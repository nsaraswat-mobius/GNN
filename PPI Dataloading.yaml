name: Load PPI Dataset
description: Loads the PPI and saves it as a Dataset type.
outputs:
  - {name: PPI_data, type: Dataset}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch torchvision torchaudio torch_geometric pandas || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch torchvision torchaudio torch_geometric pandas --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import os
        import pickle
        import torch
        from torch_geometric.datasets import PPI
        from torch_geometric.data import Data
        def combine_snapshots(dataset):
            """
            Combine all snapshots in the EllipticBitcoinDataset into a single data object.
            """
            x_list = [snapshot.x for snapshot in dataset]
            y_list = [snapshot.y for snapshot in dataset]
            edge_index_list = [snapshot.edge_index for snapshot in dataset]
            train_mask_list = [snapshot.train_mask for snapshot in dataset]
            test_mask_list = [snapshot.test_mask for snapshot in dataset]
        
            # Concatenate features, labels, and masks
            x = torch.cat(x_list, dim=0)
            y = torch.cat(y_list, dim=0)
            
            # Adjust edge indices and concatenate
            num_nodes = 0
            for i in range(len(edge_index_list)):
                edge_index_list[i] = edge_index_list[i] + num_nodes
                num_nodes += x_list[i].shape[0]
            edge_index = torch.cat(edge_index_list, dim=1)
        
            train_mask = torch.cat(train_mask_list, dim=0)
            test_mask = torch.cat(test_mask_list, dim=0)
        
            return Data(x=x, y=y, edge_index=edge_index, train_mask=train_mask, test_mask=test_mask)
        parser = argparse.ArgumentParser()
        parser.add_argument('--PPI_data', type=str, required=True)
        
        args = parser.parse_args()
        
        print(f"[INFO] Loading Elliptic Bitcoin Dataset...")
        dataset = PPI(root='/tmp/PPI')
        data = combine_snapshots(dataset)
        
        print(f"[INFO] Dataset loaded successfully")
        print(f"[INFO] Number of nodes: {data.x.shape[0]}")
        print(f"[INFO] Number of edges: {data.edge_index.shape[1]}")
        print(f"[INFO] Number of features: {data.x.shape[1]}")
        print(f"[INFO] Unique labels: {torch.unique(data.y)}")
        
        # Ensure output directory
        os.makedirs(os.path.dirname(args.PPI_data), exist_ok=True)
        
        # Save the entire data object using pickle
        with open(args.PPI_data, "wb") as f: pickle.dump(data, f)
        
        print(f"[SUCCESS] Saved PPI dataset to {args.PPI_data}")
        
    args:
      - --PPI_data
      - {outputPath: PPI_data}
