name: Load PPI Dataset
description: Loads the PPI and saves it as a Dataset type.
outputs:
  - {name: PPI_data, type: Dataset}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch torchvision torchaudio torch_geometric pandas || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch torchvision torchaudio torch_geometric pandas --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import os
        import pickle
        import torch
        from torch_geometric.datasets import PPI
        
        parser = argparse.ArgumentParser()
        parser.add_argument('--PPI_data', type=str, required=True)
        
        args = parser.parse_args()
        
        print(f"[INFO] Loading Elliptic Bitcoin Dataset...")
        dataset = PPI(root='/tmp/PPI')
        data = dataset[0]
        
        print(f"[INFO] Dataset loaded successfully")
        print(f"[INFO] Number of nodes: {data.x.shape[0]}")
        print(f"[INFO] Number of edges: {data.edge_index.shape[1]}")
        print(f"[INFO] Number of features: {data.x.shape[1]}")
        print(f"[INFO] Unique labels: {torch.unique(data.y)}")
        
        # Ensure output directory
        os.makedirs(os.path.dirname(args.PPI_data), exist_ok=True)
        
        # Save the entire data object using pickle
        with open(args.PPI_data, "wb") as f: pickle.dump(data, f)
        
        print(f"[SUCCESS] Saved PPI dataset to {args.PPI_data}")
        
    args:
      - --PPI_data
      - {outputPath: PPI_data}
