name: Preprocess PPI Data
description: Analyzes class distribution in the PPI dataset, outputs alpha & class weights as JSON, generates config, and defines DataContainer.
inputs:
  - name: PPI_data
    type: Dataset
outputs:
  - name: config
    type: String
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch torch_geometric || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch torch_geometric --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse, os, pickle, torch, json
        from torch_geometric.datasets import PPI

        
        class DataContainer:
            
            def __init__(self, train_dataset, test_dataset):
                self.dataset = train_dataset
                self.test_dataset = test_dataset
                self.train_mask = None
                self.test_mask = None

       
        parser = argparse.ArgumentParser()
        parser.add_argument('--PPI_data', type=str, required=True)
        parser.add_argument('--config', type=str, required=True)
        args = parser.parse_args()

        print(f" Input dataset path: {args.PPI_data}")
        print(f" Output JSON path: {args.config}")


        try:
            with open(args.PPI_data, "rb") as f:
                data_dict = pickle.load(f)
        except Exception as e:
            print(f"Failed to load dataset: {e}")
        train_dataset = data_dict.dataset
        test_dataset = data_dict.test_dataset
        container = DataContainer(train_dataset, test_dataset)

        os.makedirs(os.path.dirname(args.config), exist_ok=True)


       
        config = {}
        config['input_dim'] = train_dataset.num_features
        config['output_dim'] = train_dataset.num_classes
        config['loss_function'] = 'bce_with_logits'



        with open(args.config, 'w') as f:
            json.dump(config, f, indent=2)

        print(f"Saved config to {args.config}")
        print(f"Example values:")

        
    args:
      - --PPI_data
      - {inputPath: PPI_data}
      - --config
      - {outputPath: config}
